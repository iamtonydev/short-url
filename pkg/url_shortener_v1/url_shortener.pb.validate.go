// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: url_shortener.proto

package url_shortener_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddShortUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddShortUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddShortUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddShortUrlRequestMultiError, or nil if none found.
func (m *AddShortUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddShortUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		err = AddShortUrlRequestValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := AddShortUrlRequestValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddShortUrlRequestMultiError(errors)
	}

	return nil
}

// AddShortUrlRequestMultiError is an error wrapping multiple validation errors
// returned by AddShortUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type AddShortUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddShortUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddShortUrlRequestMultiError) AllErrors() []error { return m }

// AddShortUrlRequestValidationError is the validation error returned by
// AddShortUrlRequest.Validate if the designated constraints aren't met.
type AddShortUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddShortUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddShortUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddShortUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddShortUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddShortUrlRequestValidationError) ErrorName() string {
	return "AddShortUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddShortUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddShortUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddShortUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddShortUrlRequestValidationError{}

// Validate checks the field values on AddShortUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddShortUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddShortUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddShortUrlResponseMultiError, or nil if none found.
func (m *AddShortUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddShortUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddShortUrlResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddShortUrlResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddShortUrlResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddShortUrlResponseMultiError(errors)
	}

	return nil
}

// AddShortUrlResponseMultiError is an error wrapping multiple validation
// errors returned by AddShortUrlResponse.ValidateAll() if the designated
// constraints aren't met.
type AddShortUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddShortUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddShortUrlResponseMultiError) AllErrors() []error { return m }

// AddShortUrlResponseValidationError is the validation error returned by
// AddShortUrlResponse.Validate if the designated constraints aren't met.
type AddShortUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddShortUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddShortUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddShortUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddShortUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddShortUrlResponseValidationError) ErrorName() string {
	return "AddShortUrlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddShortUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddShortUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddShortUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddShortUrlResponseValidationError{}

// Validate checks the field values on GetUrlRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUrlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUrlRequestMultiError, or
// nil if none found.
func (m *GetUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetShortUrl()) != 10 {
		err := GetUrlRequestValidationError{
			field:  "ShortUrl",
			reason: "value length must be 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return GetUrlRequestMultiError(errors)
	}

	return nil
}

// GetUrlRequestMultiError is an error wrapping multiple validation errors
// returned by GetUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUrlRequestMultiError) AllErrors() []error { return m }

// GetUrlRequestValidationError is the validation error returned by
// GetUrlRequest.Validate if the designated constraints aren't met.
type GetUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUrlRequestValidationError) ErrorName() string { return "GetUrlRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUrlRequestValidationError{}

// Validate checks the field values on GetUrlResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUrlResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUrlResponseMultiError,
// or nil if none found.
func (m *GetUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUrlResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUrlResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUrlResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUrlResponseMultiError(errors)
	}

	return nil
}

// GetUrlResponseMultiError is an error wrapping multiple validation errors
// returned by GetUrlResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUrlResponseMultiError) AllErrors() []error { return m }

// GetUrlResponseValidationError is the validation error returned by
// GetUrlResponse.Validate if the designated constraints aren't met.
type GetUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUrlResponseValidationError) ErrorName() string { return "GetUrlResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUrlResponseValidationError{}

// Validate checks the field values on AddShortUrlResponse_Result with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddShortUrlResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddShortUrlResponse_Result with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddShortUrlResponse_ResultMultiError, or nil if none found.
func (m *AddShortUrlResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *AddShortUrlResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShortUrl

	if len(errors) > 0 {
		return AddShortUrlResponse_ResultMultiError(errors)
	}

	return nil
}

// AddShortUrlResponse_ResultMultiError is an error wrapping multiple
// validation errors returned by AddShortUrlResponse_Result.ValidateAll() if
// the designated constraints aren't met.
type AddShortUrlResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddShortUrlResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddShortUrlResponse_ResultMultiError) AllErrors() []error { return m }

// AddShortUrlResponse_ResultValidationError is the validation error returned
// by AddShortUrlResponse_Result.Validate if the designated constraints aren't met.
type AddShortUrlResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddShortUrlResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddShortUrlResponse_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddShortUrlResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddShortUrlResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddShortUrlResponse_ResultValidationError) ErrorName() string {
	return "AddShortUrlResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e AddShortUrlResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddShortUrlResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddShortUrlResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddShortUrlResponse_ResultValidationError{}

// Validate checks the field values on GetUrlResponse_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUrlResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUrlResponse_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUrlResponse_ResultMultiError, or nil if none found.
func (m *GetUrlResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUrlResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GetUrlResponse_ResultMultiError(errors)
	}

	return nil
}

// GetUrlResponse_ResultMultiError is an error wrapping multiple validation
// errors returned by GetUrlResponse_Result.ValidateAll() if the designated
// constraints aren't met.
type GetUrlResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUrlResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUrlResponse_ResultMultiError) AllErrors() []error { return m }

// GetUrlResponse_ResultValidationError is the validation error returned by
// GetUrlResponse_Result.Validate if the designated constraints aren't met.
type GetUrlResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUrlResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUrlResponse_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUrlResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUrlResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUrlResponse_ResultValidationError) ErrorName() string {
	return "GetUrlResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e GetUrlResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUrlResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUrlResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUrlResponse_ResultValidationError{}
