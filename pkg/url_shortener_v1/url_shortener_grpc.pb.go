// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: url_shortener.proto

package url_shortener_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrlShortenerV1Client is the client API for UrlShortenerV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlShortenerV1Client interface {
	AddShortUrl(ctx context.Context, in *AddShortUrlRequest, opts ...grpc.CallOption) (*AddShortUrlResponse, error)
	GetUrl(ctx context.Context, in *GetUrlRequest, opts ...grpc.CallOption) (*GetUrlResponse, error)
}

type urlShortenerV1Client struct {
	cc grpc.ClientConnInterface
}

func NewUrlShortenerV1Client(cc grpc.ClientConnInterface) UrlShortenerV1Client {
	return &urlShortenerV1Client{cc}
}

func (c *urlShortenerV1Client) AddShortUrl(ctx context.Context, in *AddShortUrlRequest, opts ...grpc.CallOption) (*AddShortUrlResponse, error) {
	out := new(AddShortUrlResponse)
	err := c.cc.Invoke(ctx, "/api.url_shortener_v1.UrlShortenerV1/AddShortUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerV1Client) GetUrl(ctx context.Context, in *GetUrlRequest, opts ...grpc.CallOption) (*GetUrlResponse, error) {
	out := new(GetUrlResponse)
	err := c.cc.Invoke(ctx, "/api.url_shortener_v1.UrlShortenerV1/GetUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlShortenerV1Server is the server API for UrlShortenerV1 service.
// All implementations must embed UnimplementedUrlShortenerV1Server
// for forward compatibility
type UrlShortenerV1Server interface {
	AddShortUrl(context.Context, *AddShortUrlRequest) (*AddShortUrlResponse, error)
	GetUrl(context.Context, *GetUrlRequest) (*GetUrlResponse, error)
	mustEmbedUnimplementedUrlShortenerV1Server()
}

// UnimplementedUrlShortenerV1Server must be embedded to have forward compatible implementations.
type UnimplementedUrlShortenerV1Server struct {
}

func (UnimplementedUrlShortenerV1Server) AddShortUrl(context.Context, *AddShortUrlRequest) (*AddShortUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShortUrl not implemented")
}
func (UnimplementedUrlShortenerV1Server) GetUrl(context.Context, *GetUrlRequest) (*GetUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrl not implemented")
}
func (UnimplementedUrlShortenerV1Server) mustEmbedUnimplementedUrlShortenerV1Server() {}

// UnsafeUrlShortenerV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlShortenerV1Server will
// result in compilation errors.
type UnsafeUrlShortenerV1Server interface {
	mustEmbedUnimplementedUrlShortenerV1Server()
}

func RegisterUrlShortenerV1Server(s grpc.ServiceRegistrar, srv UrlShortenerV1Server) {
	s.RegisterService(&UrlShortenerV1_ServiceDesc, srv)
}

func _UrlShortenerV1_AddShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerV1Server).AddShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.url_shortener_v1.UrlShortenerV1/AddShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerV1Server).AddShortUrl(ctx, req.(*AddShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortenerV1_GetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerV1Server).GetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.url_shortener_v1.UrlShortenerV1/GetUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerV1Server).GetUrl(ctx, req.(*GetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlShortenerV1_ServiceDesc is the grpc.ServiceDesc for UrlShortenerV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlShortenerV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.url_shortener_v1.UrlShortenerV1",
	HandlerType: (*UrlShortenerV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddShortUrl",
			Handler:    _UrlShortenerV1_AddShortUrl_Handler,
		},
		{
			MethodName: "GetUrl",
			Handler:    _UrlShortenerV1_GetUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "url_shortener.proto",
}
